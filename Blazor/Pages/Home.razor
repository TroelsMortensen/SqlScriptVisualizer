@page "/"
@using Blazor.ViewModels
@using Blazor.Data
@using Blazor.Data.Models
@inject EntityManager EntityManager
@inject RedrawEventPublisher Redrawer

<div class="outer-box">
    <div class="left-side-box">
        <div class="left-side-top-area">
            <button @onclick="GenerateDiagram" style="float:right; margin: 5px">Generate -></button>
        </div>
        <textarea class="script-input-area" @bind="sqlScript">

        </textarea>
    </div>
    <div class="right-side-box">
        <div class="diagram-canvas"
             @onmousedown="StartDrag"
             @onmousemove="Drag"
             @onmouseleave="StopDrag"
             @onmouseup="StopDrag">
            @foreach (EntityViewModel entity in entities)
            {
                <EntityBox Evm="entity" OnRelease="ReDraw"></EntityBox>
            }
            <svg class="fk-link-svg-canvas">
                @foreach (FkLink link in links)
                {
                    <FkLinkComp Link="link"/>
                }
            </svg>
        </div>
    </div>
</div>


@code {

    private string sqlScript = "";

    private List<EntityViewModel> entities = new();
    private List<FkLink> links = new();
    private bool isDraggingCanvas;
    private double prevX, prevY;

    // private void PrintCoords(MouseEventArgs e)
    // {
    //     Console.WriteLine($"Board click pos: ({e.ClientX}, {e.ClientY})");
    // }

    private async Task GenerateDiagram()
    {
        entities = new();
        links = new();
        await Task.Delay(500);
        EntityManager.GenerateData(sqlScript);
        entities = EntityManager.Entities;
        links = EntityManager.FkLinks;
    }

    private void ReDraw()
    {
        StateHasChanged();
    }

    private void StartDrag(MouseEventArgs args)
    {
        isDraggingCanvas = true;
        prevX = args.ClientX;
        prevY = args.ClientY;
    }

    private void Drag(MouseEventArgs args)
    {
        if (!isDraggingCanvas)
        {
            return;
        }

        (double x, double y) diff = (args.ClientX - prevX, args.ClientY - prevY);
        prevX = args.ClientX;
        prevY = args.ClientY;
        Redrawer.MoveCanves(diff);
    }
    
    private void StopDrag(MouseEventArgs args)
    {
        isDraggingCanvas = false;
    }

}