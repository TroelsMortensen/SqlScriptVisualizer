@using Blazor.ViewModels
@using Attribute = Blazor.Data.Models.Attribute
<div style="
width:100px; 
display: inline-block; 
border: 1px solid black; 
position: absolute; 
top:@Y; left: @X;
background-color: lightgray"
     @ref="element">
    <h5 style="
    text-align: center; 
    width: 100%; 
    background-color: darkcyan; 
    cursor: pointer; 
    border-bottom: 1px solid black; 
    user-select: none;
    padding: 10px"
        @onmousedown="(e) => StartDrag(e)"
        @onmouseup="StopDrag"
        @onmouseleave="StopDrag"
        @onmousemove="(e) => DragEntity(e)">
        @EVM.Entity.Name
    </h5>
    @foreach (Attribute attr in EVM.Entity.Attributes)
    {
        <div style="padding-left: 10px">@attr.Name</div>
    }
</div>

@code {
    [Parameter] public EntityViewModel EVM { get; set; }
    private int x = 100;
    private int y = 100;
    private string X => x + "px";
    private string Y => y + "px";
    private ElementReference element;
    private bool isDragging;
    private double xOffset;

    protected override void OnInitialized()
    {
        x = EVM.Xstart;
        y = EVM.Ystart;
    }

    private void StartDrag(MouseEventArgs e)
    {
        xOffset = e.ClientX;
        isDragging = true;
        Console.WriteLine(e.ClientX);
        Console.WriteLine("offset click: " + (e.ClientX - x));
        Console.WriteLine("offset click: " + (e.ClientY - y));
    }

    private void StopDrag()
    {
        if (!isDragging) return;
        Console.WriteLine("Stop");
        isDragging = false;
    }

    private void DragEntity(MouseEventArgs e)
    {
        if (!isDragging) return;

        y = (int)e.ClientY - 30; // hvorfor 20?
        x = (int)(e.ClientX - 770); // hvorfor 770?
    }

}