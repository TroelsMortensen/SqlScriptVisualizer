@using Blazor.ViewModels
@using Attribute = Blazor.Data.Models.Attribute
@using Blazor.Data
@using Blazor.Data.Models
@inject RedrawEventPublisher Redrawer
@implements IDisposable

<div style="top: @Y;left: @X; width: @(Constants.EntityBoxWidth + "px");"
     class="entity-box">
    <div 
        @onclick:stopPropagation="true" 
        @onclick:preventDefault="true"
        @onmousedown:stopPropagation="true"
        @onmousedown:preventDefault="true">
        <h5 class="entity-header"
            @onmousedown="StartDrag"
            @onmouseup="StopDrag"
            @onmouseleave="StopDrag"
            @onmousemove="DragEntity">
            @Evm.Entity.Name
        </h5>
    </div>
    <table class="attribute-table">
        @foreach (Attribute attr in Evm.Entity.Attributes)
        {
            <tr>
                <td>
                    @ConstructPkFkString(attr)
                </td>
                <td>@attr.Name</td>
            </tr>
        }
    </table>
</div>

@code {
    [Parameter] public EntityViewModel Evm { get; set; } = null!;

    [Parameter] public EventCallback OnRelease { get; set; }

    private string X => Evm.X + "px";
    private string Y => Evm.Y + "px";
    private bool isDragging;
    private double xOffset;

    protected override void OnInitialized()
    {
        Redrawer.OnMoveCanvas += CanvasMoved;
    }

    private void CanvasMoved((double x, double y) diff)
    {
        Evm.X += (int)diff.x;
        Evm.Y += (int)diff.y;
    }

    private void StartDrag(MouseEventArgs e)
    {
        xOffset = e.ClientX;
        isDragging = true;
    }

    private void StopDrag()
    {
        if (!isDragging) return;
        isDragging = false;
    }

    private void DragEntity(MouseEventArgs e)
    {
        if (!isDragging) return;

        // following offsets are strangely necessary to maintain the entity box relative to where the mouse was clicked.
        Evm.Y = (int)e.ClientY - 30; // hvorfor 20?
        Evm.X = (int)(e.ClientX - 810); // hvorfor 770?
        Redrawer.RaiseRedrawEvent();
    }

    private string ConstructPkFkString(Attribute attr)
    {
        string result = "";
        if (attr.IsPrimaryKey)
        {
            result += "PK";
        }

        if (attr.ForeignKey != null)
        {
            result += string.IsNullOrWhiteSpace(result) ? "FK" : ",FK";
        }

        return result;
    }

    public void Dispose()
    {
        Redrawer.OnMoveCanvas -= CanvasMoved;
    }

}