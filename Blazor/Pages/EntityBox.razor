@using Blazor.ViewModels
@using Attribute = Blazor.Data.Models.Attribute
@using Blazor.Data
<div style="top: @Y;left: @X; width: @Constants.EntityBoxWidth"
     class="entity-box"
     @ref="element">
    <h5 class="entity-header"
        @onmousedown="(e) => StartDrag(e)"
        @onmouseup="StopDrag"
        @onmouseleave="StopDrag"
        @onmousemove="(e) => DragEntity(e)">
        @Evm.Entity.Name
    </h5>
    <table class="attribute-table">
        @foreach (Attribute attr in Evm.Entity.Attributes)
        {
            <tr>
                <td>
                    --- lav calc metode her
                    @(attr.IsPrimaryKey ? "PK" :
                    attr.ForeignKey != null ? "FK" : "")
                </td>
                <td>@attr.Name</td>
            </tr>
        }
    </table>
</div>

@code {
    [Parameter] public EntityViewModel Evm { get; set; } = null!;
    private int x = 0;
    private int y = 0;
    private string X => x + "px";
    private string Y => y + "px";
    private ElementReference element;
    private bool isDragging;
    private double xOffset;

    protected override void OnInitialized()
    {
        x = Evm.Xstart;
        y = Evm.Ystart;
    }

    private void StartDrag(MouseEventArgs e)
    {
        xOffset = e.ClientX;
        isDragging = true;
        Console.WriteLine(e.ClientX);
        Console.WriteLine("offset click: " + (e.ClientX - x));
        Console.WriteLine("offset click: " + (e.ClientY - y));
    }

    private void StopDrag()
    {
        if (!isDragging) return;
        Console.WriteLine("Stop");
        isDragging = false;
    }

    private void DragEntity(MouseEventArgs e)
    {
        if (!isDragging) return;

        y = (int)e.ClientY - 30; // hvorfor 20?
        x = (int)(e.ClientX - 770); // hvorfor 770?
    }

}